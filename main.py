import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import aiohttp
import asyncio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8190768971:AAGGSA5g-hUnrc34R8gOwwjfSez8BJ6Puz8"
CRYPTOBOT_TOKEN = "436380:AATIxpkr8ghHzhQq7psQ9YdjUXxLSQuAdUA"
WEBHOOK_URL = "https://three-0hx9.onrender.com/webhook"  # üö® –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL Render!

# === Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)
application: Application = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Telegram-–±–æ—Ç–∞

# === –í–µ–±—Ö—É–∫ –æ—Ç CryptoBot ===
@app.route("/crypto", methods=["POST"])
def crypto():
    data = request.json
    print("üì• –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç CryptoBot:", data)

    if data.get("status") == "success":
        user_id = data.get("user_id")
        amount = data.get("amount")
        print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: user_id={user_id}, amount={amount}")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã –∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    return "ok"

# === –í–µ–±—Ö—É–∫ –¥–ª—è Telegram ===
@app.route("/webhook", methods=["POST"])
async def telegram_webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot=application.bot)
    await application.process_update(update)
    return "ok"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç", callback_data="buy")],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite")],
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "balance":
        await query.edit_message_text("–í–∞—à –±–∞–ª–∞–Ω—Å: 0.001 BTC")
    elif data == "buy":
        await query.edit_message_text("–ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ ...")
    elif data == "invite":
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 1%.")
    elif data == "pay":
        url = await create_invoice(query.from_user.id)
        if url:
            await query.edit_message_text(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}")
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
    elif data == "help":
        await query.edit_message_text("–ë–æ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

# === –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ –≤ CryptoBot ===
async def create_invoice(user_id: int) -> str | None:
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN,
        "Content-Type": "application/json"
    }
    json_data = {
        "asset": "USDT",
        "amount": 1.00,
        "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "payload": str(user_id),
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openChannel",
        "paid_btn_url": "https://t.me/yourchannel",
        "allow_comments": False,
        "allow_anonymous": False,
        "expires_in": 900
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as response:
            data = await response.json()
            print("üßæ –û—Ç–≤–µ—Ç –æ—Ç CryptoBot:", data)
            if data.get("ok"):
                return data["result"]["pay_url"]
            return None

# === –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
async def main():
    global application
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_buttons))

    bot: Bot = application.bot
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(url=WEBHOOK_URL)
    print("‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

    # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º polling, —Ç–æ–ª—å–∫–æ Flask –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    # await application.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
    app.run(host="0.0.0.0", port=5000)
