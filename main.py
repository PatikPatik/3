import logging
import threading
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# üîê –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "8190768971:AAGGSA5g-hUnrc34R8gOwwjfSez8BJ6Puz8"
CRYPTOBOT_TOKEN = "436380:AATIxpkr8ghHzhQq7psQ9YdjUXxLSQuAdUA"

# üåê Flask
app = Flask(__name__)

@app.route('/crypto', methods=['POST'])
def crypto_webhook():
    data = request.json
    print("\nüì• –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç CryptoBot:", data)
    if data.get("status") == "success":
        user_id = data.get("user_id")
        amount = data.get("amount")
        print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: user_id={user_id}, amount={amount}")
    return "ok"

# üìé –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("‚öôÔ∏è –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç", callback_data="buy_hashrate")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == "pay":
        url = create_invoice(query.from_user.id)
        if url:
            query.edit_message_text(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}")
        else:
            query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
    
    elif query.data == "balance":
        query.edit_message_text("üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDT")  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
    elif query.data == "buy_hashrate":
        query.edit_message_text("‚öôÔ∏è –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# üßæ –°–æ–∑–¥–∞–Ω–∏–µ —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot
import requests
def create_invoice(user_id: int):
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Content-Type": "application/json",
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
    }
    payload = {
        "asset": "USDT",
        "amount": 1.00,
        "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openChannel",
        "paid_btn_url": "https://t.me/yourchannel",
        "payload": str(user_id),
        "allow_comments": False,
        "allow_anonymous": False,
        "expires_in": 900
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        data = response.json()
        print("üßæ –û—Ç–≤–µ—Ç –æ—Ç CryptoBot:", data)
        if data.get("ok"):
            return data["result"]["pay_url"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞:", e)
    return None

# üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
def run_bot():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.start_polling()
    updater.idle()

# üì¶ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Flask –∏ Telegram
def start_flask():
    app.run(host="0.0.0.0", port=5000)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    threading.Thread(target=start_flask).start()
    run_bot()
