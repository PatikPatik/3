import asyncio
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import aiohttp
import nest_asyncio
import threading

# üîê –¢–æ–∫–µ–Ω—ã
BOT_TOKEN = "8190768971:AAGGSA5g-hUnrc34R8gOwwjfSez8BJ6Puz8"
CRYPTOBOT_TOKEN = "436380:AATIxpkr8ghHzhQq7psQ9YdjUXxLSQuAdUA"

# üåê Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# üì© Webhook CryptoBot
@app.route("/crypto", methods=["POST"])
def crypto_webhook():
    data = request.json
    print("üì• –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç CryptoBot:", data)
    if data.get("status") == "success":
        user_id = data.get("user_id")
        amount = data.get("amount")
        print(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞: user_id={user_id}, amount={amount}")
    return "ok"

# üìç /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üöÄ –ö—É–ø–∏—Ç—å —Ö–µ—à—Ä–µ–π—Ç", callback_data="buy")],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")

    if data == "balance":
        await query.edit_message_text("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0.001 BTC")
    elif data == "buy":
        await query.edit_message_text("–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ö–µ—à—Ä–µ–π—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç ...")
    elif data == "invite":
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 1% –æ—Ç –µ–≥–æ –¥–æ—Ö–æ–¥–∞.")
    elif data == "help":
        await query.edit_message_text("–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –º–∞–π–Ω–∏–Ω–≥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    elif data == "pay":
        url = await create_invoice(query.from_user.id)
        if url:
            await query.edit_message_text(f"üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")

# üßæ –°—á—ë—Ç —á–µ—Ä–µ–∑ CryptoBot
async def create_invoice(user_id: int):
    url = "https://pay.crypt.bot/api/createInvoice"
    headers = {
        "Content-Type": "application/json",
        "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
    }
    payload = {
        "asset": "USDT",
        "amount": 1.00,
        "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
        "paid_btn_name": "openChannel",
        "paid_btn_url": "https://t.me/yourchannel",
        "payload": str(user_id),
        "allow_comments": False,
        "allow_anonymous": False,
        "expires_in": 900
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            result = await resp.json()
            print("üßæ –û—Ç–≤–µ—Ç –æ—Ç CryptoBot:", result)
            if result.get("ok"):
                return result["result"]["pay_url"]
            return None

# üöÄ Telegram –±–æ—Ç
async def run_bot():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    print("‚úÖ Telegram bot –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()

# üßµ –ó–∞–ø—É—Å–∫ Flask + Bot
def run_flask():
    app.run(host="0.0.0.0", port=5000)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    nest_asyncio.apply()
    threading.Thread(target=run_flask).start()
    asyncio.run(run_bot())
